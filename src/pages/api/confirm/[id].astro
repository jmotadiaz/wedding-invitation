---

import { confirmGuest } from "@domain/Guest";
import { ValidationError } from "@domain/Guest";

const { id } = Astro.params as { id: string };
let errors: ValidationError[] | null = null;

if (Astro.request.method === "PATCH") {
	const formData = await Astro.request.formData();
	try {
		await confirmGuest(id, {
			allergies: formData.get("allergies") as string,
			confirmedAttendees: Number.parseInt(
				formData.get("confirmedAttendees") as string,
			),
			busSeats: Number.parseInt(formData.get("busSeats") as string),
			bus: formData.has("bus"),
			busStop: formData.get("busStop") as string,
		});
	} catch (e) {
		errors = Array.isArray(e)
			? (e as ValidationError[])
			: [ValidationError.GENERIC];
	}
}

const getErrorMessage = (error: ValidationError) => {
	switch (error) {
		case ValidationError.CONFIRMATION_REQUIRED:
			return "Debes confirmar tu asistencia";
		case ValidationError.BUS_STOP_REQUIRED:
			return "Si quieres autobus, debes seleccionar una parada";
		case ValidationError.BUS_SEATS_REQUIRED:
			return "Si quieres autobus, debes seleccionar el numero de asientos";
		case ValidationError.BUS_SEATS_OVER_CONFIRMED_ATTENDEES:
			return "El numero de asientos no puede ser superior al numero de asistentes confirmados";
		default:
			return "Error desconocido, vuelva a intentarlo";
	}
};
---
{errors ?
	<div>
		{errors.map((error) => (
			<p class="text-red-500 animate-appear mt-5">{getErrorMessage(error)}</p>
		))}
	</div>
	:
	<span id="guest-submit" hx-swap-oob="true">Actualizar</span>
	<p class="text-green-500 animate-appear mt-4">Informacion Guardada</p>
}

