---

import ConfirmForm from "@components/ConfirmForm.astro";
import ConfirmedGuestInfo from "@components/ConfirmedGuestInfo.astro";
import { confirmGuest, getGuest, stops } from "@domain/Guest";
import { ValidationError } from "@domain/Guest";
import { createFormDataWrapper } from "@utils";

export const partial = true;

const { id } = Astro.params as { id: string };
let errors: ValidationError[] | null = null;
let guest = await getGuest(id);

if (Astro.request.method === "PATCH" && guest) {
	const formData = createFormDataWrapper(await Astro.request.formData());
	try {
		guest = await confirmGuest(id, {
			declineInvitation: formData.has("declineInvitation"),
			confirmedAttendees: guest.expectedAttendees.filter((att) =>
				formData.has(att),
			),
			allergies: formData.get("allergies"),
			busSeats: Number.parseInt(formData.get("busSeats")),
			bus: formData.has("bus"),
			busStop: formData.get("busStop"),
		});
	} catch (e) {
		errors = Array.isArray(e)
			? (e as ValidationError[])
			: [ValidationError.GENERIC];
	}
}

const getErrorMessage = (error: ValidationError) => {
	switch (error) {
		case ValidationError.CONFIRMATION_REQUIRED:
			return "Debes confirmar tu asistencia";
		case ValidationError.BUS_STOP_REQUIRED:
			return "Si quieres autobus, debes seleccionar una parada";
		case ValidationError.BUS_SEATS_REQUIRED:
			return "Si quieres autobus, debes seleccionar el numero de asientos";
		case ValidationError.BUS_SEATS_OVER_CONFIRMED_ATTENDEES:
			return "El numero de asientos no puede ser superior al numero de asistentes confirmados";
		case ValidationError.BUS_STOP_ERROR:
			return `La parada debe ser una de las siguientes: ${stops.join(", ")}`;
		default:
			return "Error desconocido, vuelva a intentarlo";
	}
};

if (!guest) {
	return Astro.error(404);
}
---
{errors ?
	<ConfirmForm guest={guest} />
	<div>
		{errors.map((error) => (
			<p class="text-red-500 animate-appear mt-5">{getErrorMessage(error)}</p>
		))}
	</div>
	:
	<ConfirmedGuestInfo guest={guest} />
}

